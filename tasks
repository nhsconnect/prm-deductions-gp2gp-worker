#!/bin/bash

set -Eeo pipefail

###########################
# Local Config Parameters #
###########################

AWS_DEFAULT_REGION=eu-west-2
IMAGE_REPO_NAME=deductions/gp2gp-adaptor
export NHS_SERVICE=gp2gp-worker

####################################
# Instance (Environment) Variables #
####################################

function check_env {
  if [[ -z "${NHS_ENVIRONMENT}" ]]; then
    echo "Must set NHS_ENVIRONMENT"
    exit 1
  fi
}

function check_nhs_service {
  if [[ -z "${NHS_SERVICE}" ]]; then
    echo "Must set NHS_SERVICE"
    exit 1
  fi
}

function configure_local_envs {
  export GP2GP_ADAPTOR_MHS_QUEUE_URL_1=tcp://mq-1:61613
  export GP2GP_ADAPTOR_MHS_QUEUE_URL_2=tcp://mq-2:61613
  export GP2GP_ADAPTOR_MHS_QUEUE_USERNAME=admin
  export GP2GP_ADAPTOR_MHS_QUEUE_PASSWORD=admin
  export GP2GP_ADAPTOR_MHS_QUEUE_NAME=gp2gp-test
  export GP2GP_ADAPTOR_MHS_QUEUE_VIRTUAL_HOST="/"
  export REPOSITORY_URI=$IMAGE_REPO_NAME
  export NODE_ENV=local
  export GP2GP_ADAPTOR_AUTHORIZATION_KEYS_FOR_GP_TO_REPO=auth-key-2
  export GP2GP_ADAPTOR_AUTHORIZATION_KEYS_FOR_REPO_TO_GP=auth-key-4
  export GP2GP_ADAPTOR_AUTHORIZATION_KEYS_FOR_EHR_REPO=auth-key-3
}

function get_latest_commit_hash {
  export COMMIT_HASH=$(git rev-parse HEAD | cut -c 1-7)
}

function get_aws_account_id {
    AWS_ACCOUNT_ID=$(dojo -c Dojofile-infra "aws sts get-caller-identity | jq -r .Account")
 }

#######################
# Terraform Functions #
#######################

function tf_plan {
  operation=$1
  cd terraform

  COMMIT_HASH=$(git rev-parse HEAD | cut -c 1-7)

  if [[ -z "${GO_DEPENDENCY_LABEL_APP}" ]]; then
    echo "Must set GO_DEPENDENCY_LABEL_APP"
    exit 1
  fi

  IMAGE_TAG=${GO_DEPENDENCY_LABEL_APP}

  terraform init -reconfigure -backend-config key=${NHS_SERVICE}-${NHS_ENVIRONMENT}/terraform.tfstate
  terraform get # modules
  if [[ "${operation}" == "create" ]]; then
    terraform plan -var task_image_tag=$IMAGE_TAG -var-file=$NHS_ENVIRONMENT.tfvars -out="nhs_deployment.tfplan"
  elif [[ "${operation}" == "destroy" ]]; then
    terraform plan -var task_image_tag=$IMAGE_TAG -var-file=$NHS_ENVIRONMENT.tfvars -out="nhs_deployment.tfplan" -destroy
  else
    echo "Unknown operation (should be create or destroy), got: ${operation}"
    exit 1
  fi
}

function tf_apply {
  cd terraform
  terraform init -backend-config key=${NHS_SERVICE}-${NHS_ENVIRONMENT}/terraform.tfstate
  terraform get # modules
  terraform apply nhs_deployment.tfplan
  terraform output -json > tf-out.json
}

###########
## TASKS ##
###########

command="$1"
case "${command}" in
  tf)
      check_env
      dojo -c Dojofile-infra "bash"
      ;;
  _tf_plan)
      tf_plan "$2"
      ;;
  tf_plan)
      check_env
      dojo -c Dojofile-infra "./tasks _tf_plan $2"
      ;;
  _tf_apply)
      tf_apply
      ;;
  tf_apply)
      check_env
      dojo -c Dojofile-infra "./tasks _tf_apply"
      ;;
  _wait_ecs)
      aws ecs wait services-stable \
        --region $AWS_DEFAULT_REGION \
        --cluster $NHS_ENVIRONMENT-deductions-private-ecs-cluster \
        --service $NHS_ENVIRONMENT-${NHS_SERVICE}-service
      ;;
  wait_ecs)
      check_env
      dojo -c Dojofile-infra "./tasks _wait_ecs"
      ;;
  *)
      echo "Invalid command: '${command}'"
      exit 1
      ;;
esac
set +e
